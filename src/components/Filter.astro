---

---

<form id="filter:form">
  <fieldset>
    <legend>Filter</legend>

    <label for="filter:text">Text</label>
    <input type="text" id="filter:text" />

    <label for="filter:townsfolk">Townsfolk</label>
    <input type="checkbox" id="filter:townsfolk" checked />

    <label for="filter:outsider">Outsider</label>
    <input type="checkbox" id="filter:outsider" checked />

    <label for="filter:minion">Minion</label>
    <input type="checkbox" id="filter:minion" checked />

    <label for="filter:demon">Demon</label>
    <input type="checkbox" id="filter:demon" checked />

    <label for="filter:traveller">Traveller</label>
    <input type="checkbox" id="filter:traveller" checked />

    <label for="filter:fabled">Fabled</label>
    <input type="checkbox" id="filter:fabled" checked />

    <div class="form-controls">
      <button type="reset">Reset</button>
    </div>
  </fieldset>
</form>

<style>
  fieldset {
    display: grid;
    grid-template-columns: max-content max-content;
    row-gap: 0.5rem;
    column-gap: 1rem;
    align-items: center;
    justify-items: start;
  }

  .form-controls {
    grid-column: span 2;
    margin-block: 1rem 0;
  }
</style>

<script>
  import type { CharacterType } from '../lib/characters'

  type CharacterElement = HTMLElement & {
    dataset: {
      name: string
      tagLine: string
      type: CharacterType
      firstNight: string | undefined
      otherNights: string | undefined
    }
  }

  const form = document.getElementById('filter:form') as HTMLFormElement
  const textFilter = getInput('filter:text')
  const townsfolkFilter = getCheckbox('filter:townsfolk')
  const outsiderFilter = getCheckbox('filter:outsider')
  const minionFilter = getCheckbox('filter:minion')
  const demonFilter = getCheckbox('filter:demon')
  const travellerFilter = getCheckbox('filter:traveller')
  const fabledFilter = getCheckbox('filter:fabled')

  form.addEventListener('submit', (event) => {
    event.preventDefault()
  })

  form.addEventListener('reset', () => {
    form.reset()
    setTimeout(update, 1)
  })

  addEventListener('load', update)

  function getInput(id: string): HTMLInputElement {
    const input = document.getElementById(id) as HTMLInputElement
    input.addEventListener('input', update)
    return input
  }

  function getCheckbox(id: string): HTMLInputElement {
    const input = document.getElementById(id) as HTMLInputElement
    input.addEventListener('change', update)
    return input
  }

  function update() {
    const textValue = textFilter.value.toLocaleLowerCase()
    const hidden = ({ name, tagLine, type, firstNight, otherNights }: CharacterElement['dataset']) =>
      notContainedIn(textValue, name, tagLine, firstNight, otherNights) ||
      (type === 'Townsfolk' && !townsfolkFilter.checked) ||
      (type === 'Outsider' && !outsiderFilter.checked) ||
      (type === 'Minion' && !minionFilter.checked) ||
      (type === 'Demon' && !demonFilter.checked) ||
      (type === 'Traveller' && !travellerFilter.checked) ||
      (type === 'Fabled' && !fabledFilter.checked)

    document.querySelectorAll<CharacterElement>('.character').forEach((ch) => {
      ch.hidden = hidden(ch.dataset)
    })

    document.querySelectorAll<HTMLElement>('.character-group').forEach((section) => {
      const sizeEl = section.querySelector<HTMLElement>('.character-group-size')
      section.hidden = true

      let count = 0
      for (const ch of section.querySelectorAll<CharacterElement>('.character')) {
        if (!ch.hidden) {
          section.hidden = false
          count += 1
        }
      }

      sizeEl!.innerHTML = String(count)
    })
  }

  function notContainedIn(needle: string, ...haystacks: (string | undefined)[]): boolean {
    return haystacks.every((haystack) => !contains(haystack, needle))
  }

  function contains(haystack: string | undefined, needle: string): boolean {
    return (haystack?.toLocaleLowerCase()?.indexOf(needle) ?? -1) !== -1
  }
</script>
